using Newtonsoft.Json;using System;using System.Collections.Generic;using System.Drawing;using System.Drawing.Drawing2D;using System.Drawing.Text;using System.IO;using System.Linq;using System.Reflection;using System.Web;using System.Web.Mvc;using Tameenk.Core.Domain.Enums;
using Tameenk.Models;using Tameenk.Security.Encryption;using Tameenk.Services.Checkout.Components;namespace Tameenk.Controllers{    public class OffersController : Controller    {        private readonly ICheckoutContext _checkoutContext;               public OffersController(ICheckoutContext checkoutContext)        {            _checkoutContext = checkoutContext;        }        private const string SHARED_SECRET = "xYD_3h95?D&*&rTL";        [AllowAnonymous]        [HttpGet]        public ActionResult Index()        {            return View(new DiscountsViewModel
            {
                Captcha = GetCaptcha()            });        }        [AllowAnonymous]        [HttpPost]        public ActionResult Index(DiscountsViewModel model)        {            if (model == null)            {                return View(new DiscountsViewModel                {                    Captcha = GetCaptcha()                });            }
            LanguageTwoLetterIsoCode language = LanguageTwoLetterIsoCode.Ar;
            if (model.Captcha == null)            {                model.ErrorMessage = (language == LanguageTwoLetterIsoCode.En) ? "Captcha Error" : "خطأ فى الرمز";                model.Captcha = GetCaptcha();                return View(model);            }            if (string.IsNullOrWhiteSpace(model.Captcha.Token))            {                model.ErrorMessage = (language == LanguageTwoLetterIsoCode.En) ? "Captcha Token is required" : "رمز التحقق مطلوب";                model.Captcha = GetCaptcha();                return View(model);            }            string error;            if (!ValidateCaptcha(model.Captcha, out error))            {                model.ErrorMessage = (language == LanguageTwoLetterIsoCode.En) ? "Incorrect Captcha" : "رمز التحقق خطأ";                model.Captcha = GetCaptcha();                return View(model);            }            if (string.IsNullOrWhiteSpace(model.DriverNIN))            {                model.ErrorMessage = (language == LanguageTwoLetterIsoCode.En) ? "Driver National Id is required" : "رقم الهوية مطلوب";                model.Captcha = GetCaptcha();                return View(model);            }            var result = _checkoutContext.UserHasActivePolicy(model.DriverNIN);            if (result.ErrorCode != Services.Checkout.Components.Output.CheckoutOutput.ErrorCodes.Success)            {                model.ErrorMessage = result.ErrorDescription;                model.Captcha = GetCaptcha();                return View(model);            }            model.ActivePolicyData = result.ActivePolicyData;            model.Captcha = GetCaptcha();            return View(model);
        }



        #region captcha        public CaptchaModel GetCaptcha()        {            bool noisy = true;
            //image stream 
            string img = null;            string token = null;            using (var mem = new MemoryStream())            using (var bmp = new Bitmap(100, 50))            using (var gfx = Graphics.FromImage((Image)bmp))            {                gfx.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                gfx.SmoothingMode = SmoothingMode.AntiAlias;
                //gfx.FillRectangle(Brushes.White, new Rectangle(0, 0, bmp.Width, bmp.Height));
                var assembly = Assembly.GetExecutingAssembly();
                //var resourceName = "MyCompany.MyProduct.MyFile.txt";
                using (Stream stream = assembly.GetManifestResourceStream($"Tameenk.Captcha.captcha{GetRandomNumber(1, 10)}.jpg"))                {                    gfx.DrawImage(Image.FromStream(stream), new Rectangle(0, 0, bmp.Width, bmp.Height));                }
                //add noise 
                if (noisy)                {                    int i, r, x, y;                    var pen = new Pen(Color.Yellow);                    for (i = 1; i < 10; i++)                    {                        pen.Color = Color.FromArgb(                        (GetRandomNumber(0, 255)),                        (GetRandomNumber(0, 255)),                        (GetRandomNumber(0, 255)));                        r = GetRandomNumber(0, (150 / 3));                        x = GetRandomNumber(0, 150);                        y = GetRandomNumber(0, 50);                        gfx.DrawEllipse(pen, x - r, y - r, r, r);                    }                }                string captcha = string.Empty;                int captchaLength = 4;                int charWidth = bmp.Width / captchaLength;                for (var i = 0; i < captchaLength; i++)                {                    var digit = GetRandomNumber(1, 9);                    captcha += digit;                    gfx.DrawString(digit.ToString(),                        new Font("Tahoma", GetRandomNumber(25, 40),                        GetRandomFontStyle(),                        GraphicsUnit.Pixel),                        GetRandomBrush(),                        GetRandomNumber(-3, 3) + (charWidth * i),                        GetRandomNumber(2, 10));                }

                //render as Jpeg 
                bmp.Save(mem, System.Drawing.Imaging.ImageFormat.Jpeg);                img = $"data:image/jpeg;base64,{Convert.ToBase64String(mem.ToArray())}";                var captchaToken = new CaptchaModel                {                    Image = img,                    Token = token,                    ExpiredInSeconds = 600,                    Captcha = captcha,                    ExpiryDate = DateTime.Now.AddSeconds(605)                };                token = AESEncryption.EncryptString(JsonConvert.SerializeObject(captchaToken), SHARED_SECRET);            }            return new CaptchaModel { Image = img, Token = token, ExpiryDate = DateTime.Now, ExpiredInSeconds = 600 };        }        public bool ValidateCaptcha(CaptchaModel model, out string exp)        {            exp = "";            var encryptedCaptcha = AESEncryption.DecryptString(model.Token, SHARED_SECRET);            exp = encryptedCaptcha;            try            {                var captchaToken = JsonConvert.DeserializeObject<CaptchaModel>(encryptedCaptcha);                if (captchaToken.ExpiryDate.Value.CompareTo(DateTime.Now.AddSeconds(-captchaToken.ExpiredInSeconds)) < 0)                {                    return false;                }                if (captchaToken.Captcha.Equals(model.Input, StringComparison.Ordinal))                {                    return true;                }            }            catch (Exception ex)            {                exp = ex.ToString();                return false;            }            return false;        }        private static Random random;        private static int GetRandomNumber(int min, int max)        {            random = random ?? new Random((int)DateTime.Now.Ticks);            lock (random) // synchronize
            {                return random.Next(min, max);            }        }        private FontStyle GetRandomFontStyle()        {            Dictionary<int, FontStyle> fontStyles = new Dictionary<int, FontStyle>();            fontStyles.Add(0, FontStyle.Bold);            fontStyles.Add(1, FontStyle.Italic);            fontStyles.Add(2, FontStyle.Regular);            fontStyles.Add(3, FontStyle.Underline);            fontStyles.Add(4, FontStyle.Bold | FontStyle.Italic);            fontStyles.Add(5, FontStyle.Italic | FontStyle.Underline);            fontStyles.Add(6, FontStyle.Italic | FontStyle.Underline | FontStyle.Bold);            fontStyles.Add(7, FontStyle.Bold | FontStyle.Regular);            fontStyles.Add(8, FontStyle.Underline | FontStyle.Bold);            return fontStyles[GetRandomNumber(1, 8)];        }        private Brush GetRandomBrush()        {            Dictionary<int, Brush> brushes = new Dictionary<int, Brush>();            brushes.Add(1, Brushes.Black);            brushes.Add(2, Brushes.Blue);            brushes.Add(3, Brushes.Gray);            brushes.Add(4, Brushes.Brown);            brushes.Add(5, Brushes.Chocolate);            brushes.Add(6, Brushes.Indigo);            brushes.Add(7, Brushes.BlueViolet);            return brushes[GetRandomNumber(1, 7)];        }



        #endregion

    }}