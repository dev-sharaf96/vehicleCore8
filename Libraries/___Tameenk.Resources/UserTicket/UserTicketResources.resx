<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddAttachment" xml:space="preserve">
    <value>AddAttachment</value>
  </data>
  <data name="AttachmentName" xml:space="preserve">
    <value>Attachment Name</value>
  </data>
  <data name="Attachments" xml:space="preserve">
    <value>Attachments</value>
  </data>
  <data name="ChooseInvoice" xml:space="preserve">
    <value>Choose Invoice</value>
  </data>
  <data name="ChoosePolicy" xml:space="preserve">
    <value>Choose Policy</value>
  </data>
  <data name="ChooseTicketType" xml:space="preserve">
    <value>Choose Ticket Type</value>
  </data>
  <data name="ChooseVehicle" xml:space="preserve">
    <value>Choose Vehicle</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="EmptyUserEmail" xml:space="preserve">
    <value>Empty User Email</value>
  </data>
  <data name="ErrorGeneric" xml:space="preserve">
    <value>Error: Please contact Customer Service 8001180044 (UT-01)</value>
  </data>
  <data name="FormatNotSupported" xml:space="preserve">
    <value>Invalid file format</value>
  </data>
  <data name="InsuranceCompanyName" xml:space="preserve">
    <value>Insurance Company Name</value>
  </data>
  <data name="InvalidChannel" xml:space="preserve">
    <value>Invalid Channel</value>
  </data>
  <data name="InvalidExtraData" xml:space="preserve">
    <value>Invalid Policy/Invoice Number</value>
  </data>
  <data name="InvalidInput" xml:space="preserve">
    <value>Invalid Input</value>
  </data>
  <data name="InvalidNIN" xml:space="preserve">
    <value>NIN is Empty</value>
  </data>
  <data name="InvalidTicketType" xml:space="preserve">
    <value>Invalid Ticket Type</value>
  </data>
  <data name="InvalidUserId" xml:space="preserve">
    <value>Invalid User</value>
  </data>
  <data name="InvalidUserNotes" xml:space="preserve">
    <value>User Notes is Empty</value>
  </data>
  <data name="Invoice" xml:space="preserve">
    <value>Invoice</value>
  </data>
  <data name="InvoiceIdNotBelongsToThisUser" xml:space="preserve">
    <value>Invoice not belongs to the User</value>
  </data>
  <data name="InvoiceNo" xml:space="preserve">
    <value>Invoice Number</value>
  </data>
  <data name="InvoicesNotFound" xml:space="preserve">
    <value>Invoices Not Found</value>
  </data>
  <data name="NajmPolicyIssuedBefore24hours" xml:space="preserve">
    <value>You should open ticket after 24 hours from pruchase date</value>
  </data>
  <data name="NewReplyAdded" xml:space="preserve">
    <value>New comment added to ticket number #{0}</value>
  </data>
  <data name="NewTicket" xml:space="preserve">
    <value>New Ticket</value>
  </data>
  <data name="Nin" xml:space="preserve">
    <value>National ID</value>
  </data>
  <data name="Notes" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="OpenedTicketExistsForNIN" xml:space="preserve">
    <value>There is an opened ticked for this National ID ({0}), with ticket number: {1}</value>
  </data>
  <data name="OpenedTicketExistsForSequenceOrCustomCardNumber" xml:space="preserve">
    <value>There is an opened ticked for this Sequence/Custom Number ({0}), with ticket number: {1}</value>
  </data>
  <data name="PolicesNotFound" xml:space="preserve">
    <value>Polices Not Found</value>
  </data>
  <data name="Policy" xml:space="preserve">
    <value>Policy</value>
  </data>
  <data name="PolicyIdNotBelongsToThisUser" xml:space="preserve">
    <value>Policy or Sequence/Custom Number not belongs to the User</value>
  </data>
  <data name="PolicyNo" xml:space="preserve">
    <value>Policy Number</value>
  </data>
  <data name="PopupTicketCreated" xml:space="preserve">
    <value>Ticket Created</value>
  </data>
  <data name="PopupTicketCreationFailed" xml:space="preserve">
    <value>Ticket Creation Failed</value>
  </data>
  <data name="Required" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="SequenceOrCustomCardNumber" xml:space="preserve">
    <value>Sequence/Custom Card Number</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value />
  </data>
  <data name="SubmitTicket" xml:space="preserve">
    <value>Submit Ticket</value>
  </data>
  <data name="SubmittingTicketLoading" xml:space="preserve">
    <value>Loading</value>
  </data>
  <data name="TicketClosed" xml:space="preserve">
    <value>Ticket number #{0} is closed</value>
  </data>
  <data name="TicketNumber" xml:space="preserve">
    <value>Ticket Number</value>
  </data>
  <data name="TicketReplyMessage" xml:space="preserve">
    <value>We are glad to serve you...
&lt;br&gt;&lt;br&gt;
Ticket raised with nubber #{0} and we are working on it...
&lt;br&gt;
You can follow the status of your ticket in the "Notification" menu.
&lt;br&gt;
#Bcare_cares</value>
  </data>
  <data name="TicketType" xml:space="preserve">
    <value>Ticket Type</value>
  </data>
  <data name="UserNotesMaxLength" xml:space="preserve">
    <value>Max number of letters is {0} letter</value>
  </data>
  <data name="UserTicketCreated" xml:space="preserve">
    <value>New ticket was created with number #{0}</value>
  </data>
  <data name="UserTicketCreatedByCustomerService" xml:space="preserve">
    <value>New ticket was created with number #{0} By Customer Service</value>
  </data>
  <data name="VehicleName" xml:space="preserve">
    <value>Vehicle Name</value>
  </data>
  <data name="VehicleNotFound" xml:space="preserve">
    <value>Vehicle Not Found</value>
  </data>
</root>